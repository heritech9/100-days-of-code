### Notes on Essential Concepts:  

#### 1. **`setTimeout()` Method**  
- **Definition**: Executes a function after a specified delay (in milliseconds).  
- **Syntax**: `setTimeout(function, delay, args)`  
- **Example**:  
  ```javascript
  setTimeout(() => {
      console.log("Hello after 2 seconds!");
  }, 2000);
  ```  
- **Use Cases**: Delayed actions like popups, animations, or showing notifications.  

---

#### 2. **`new FormData`**  
- **Definition**: Creates a new FormData object to capture form data for submission.  
- **Syntax**: `const formData = new FormData(formElement)`  
- **Example**:  
  ```javascript
  const form = document.querySelector("form");
  const formData = new FormData(form);
  for (let [key, value] of formData.entries()) {
      console.log(key, value);
  }
  ```  
- **Use Cases**: Useful for AJAX form submissions or APIs requiring form-like data.  

---

#### 3. **FormData Methods**  
- **`append()`**: Adds key-value pairs.  
  ```javascript
  formData.append("username", "JohnDoe");
  ```
- **`delete()`**: Deletes a key.  
  ```javascript
  formData.delete("username");
  ```
- **`get()`**: Retrieves the value of a key.  
  ```javascript
  console.log(formData.get("username"));
  ```
- **`has()`**: Checks if a key exists.  
  ```javascript
  console.log(formData.has("username")); // true or false
  ```  
- **`entries()`**: Iterates through all key-value pairs.  

---

#### 4. **`disabled` Attribute in HTML**  
- **Definition**: Disables form controls, making them unclickable or uneditable.  
- **Usage**:  
  ```html
  <button disabled>Submit</button>
  ```  
- **Dynamically with JS**:  
  ```javascript
  document.querySelector("button").disabled = true;
  ```

---

#### 5. **`classList.toggle()`**  
- **Definition**: Adds a class if it’s not present, or removes it if it is.  
- **Syntax**: `element.classList.toggle("className")`  
- **Example**:  
  ```javascript
  const box = document.querySelector(".box");
  box.classList.toggle("hidden");
  ```

---

#### 6. **`element.style`**  
- **Definition**: Directly applies inline styles to an element.  
- **Example**:  
  ```javascript
  const button = document.querySelector("button");
  button.style.backgroundColor = "blue";
  button.style.color = "white";
  ```  
- **Limitations**: Only applies to individual elements and doesn’t override stylesheets.

---

#### 7. **CSS: `row-reverse`**  
- **Definition**: Reverses the order of items in a flex container row.  
- **Example**:  
  ```css
  display: flex;
  flex-direction: row-reverse;
  ```  
- **Use Case**: Switching the alignment of content dynamically.  

---

#### 8. **`event.preventDefault()`**  
- **Definition**: Stops the default action of an event from occurring (e.g., stopping a form submission or link navigation).  
- **Example**:  
  ```javascript
  document.querySelector("form").addEventListener("submit", (e) => {
      e.preventDefault();
      console.log("Form submission prevented");
  });
  ```  
- **Use Case**: Used in forms, links, or other actions to handle behavior programmatically.  

---

#### 9. **Forms**  
- **Definition**: HTML structures to collect and submit user inputs.  
- **Components**:  
  - **`<input>`**: Text fields, checkboxes, etc.  
  - **`<label>`**: Describes the input fields.  
  - **`<button>`**: Submit or perform actions.  
  - **`<textarea>`**: Multi-line input.  

- **Good Practices**:  
  - Use `label` for accessibility.  
  - Use `required` attribute for mandatory fields.  
  - Validate inputs both on the client (JS) and server.  
  - Example of a basic form:  
    ```html
    <form id="myForm">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
        <button type="submit">Submit</button>
    </form>
    ```  
- **Accessing Form Values in JS**:  
  ```javascript
  const form = document.querySelector("#myForm");
  form.addEventListener("submit", (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      console.log(formData.get("username"));
  });
  ```  

--- 

These concepts are foundational for working effectively with forms, styles, and interactive features in web development.