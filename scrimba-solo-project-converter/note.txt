This JavaScript code powers a unit conversion app that converts values between Metric and Imperial units for length, volume, and mass. Let’s go through it step by step:

1. **Variable Declarations**:
   ```javascript
   const inputEl = document.getElementById('input-el');
   const convertBtn = document.getElementById('convert-btn');
   const lengthResult = document.querySelector('.length-result');
   const volumeResult = document.querySelector('.volume-result');
   const massResult = document.querySelector('.mass-result');
   ```
   - **Purpose**: These variables select HTML elements and store them in constants for easy access.
   - `inputEl` targets the input field for the user’s value.
   - `convertBtn` targets the "Convert" button.
   - `lengthResult`, `volumeResult`, and `massResult` target the `<p>` elements where conversion results for length, volume, and mass will be displayed.

2. **Length Conversion Function**:
   ```javascript
   function lengthConvert() {
       const meters = parseFloat(inputEl.value);
       const feet = (meters * 3.281).toFixed(3);
       const convertedFeet = (meters * 0.305).toFixed(3);
       lengthResult.innerText = `${meters} meters ≈ ${feet} feet | ${meters} feet ≈ ${convertedFeet} meters`;
   }
   ```
   - **Purpose**: Converts between meters and feet.
   - `meters` retrieves the input value and converts it to a floating-point number.
   - `feet` is the conversion result of meters to feet (1 meter ≈ 3.281 feet).
   - `convertedFeet` calculates the reverse (feet to meters, approximately 0.305).
   - `lengthResult.innerText` displays both conversions, showing the user how meters convert to feet and vice versa.

3. **Volume Conversion Function**:
   ```javascript
   function volumeConvert() {
       const liters = parseFloat(inputEl.value);
       const gallons = (liters * 0.264).toFixed(3);
       const convertedLiters = (liters * 3.785).toFixed(3);
       volumeResult.innerText = `${liters} liters ≈ ${gallons} gallons | ${liters} gallons ≈ ${convertedLiters} liters`;
   }
   ```
   - **Purpose**: Converts between liters and gallons.
   - `liters` retrieves the input value and converts it to a floating-point number.
   - `gallons` is the conversion of liters to gallons (1 liter ≈ 0.264 gallons).
   - `convertedLiters` calculates the reverse (gallons to liters, approximately 3.785).
   - `volumeResult.innerText` displays both conversion results for volume.

4. **Mass Conversion Function**:
   ```javascript
   function massConvert() {
       const kilos = parseFloat(inputEl.value);
       const pounds = (kilos * 2.204).toFixed(3);
       const convertedKilos = (kilos * 0.453).toFixed(3);
       massResult.innerText = `${kilos} kilos ≈ ${pounds} pounds | ${kilos} pounds ≈ ${convertedKilos} kilos`;
   }
   ```
   - **Purpose**: Converts between kilograms and pounds.
   - `kilos` retrieves the input value and converts it to a floating-point number.
   - `pounds` is the conversion of kilos to pounds (1 kilogram ≈ 2.204 pounds).
   - `convertedKilos` calculates the reverse (pounds to kilos, approximately 0.453).
   - `massResult.innerText` displays both conversions for mass.

5. **Main Conversion Function**:
   ```javascript
   function convert() {
       lengthConvert();
       volumeConvert();
       massConvert();
       inputEl.value = '';
   }
   ```
   - **Purpose**: Calls all three conversion functions and clears the input field.
   - `lengthConvert()`, `volumeConvert()`, and `massConvert()` run the respective conversions.
   - `inputEl.value = ''` clears the input field so the user can enter a new value.

6. **Event Listener**:
   ```javascript
   convertBtn.addEventListener('click', convert);
   ```
   - **Purpose**: Adds an event listener to the "Convert" button.
   - When the "Convert" button is clicked, the `convert` function is triggered, performing the conversions and updating the results on the page.

In summary, this JavaScript code provides a complete flow for taking an input, converting it to metric/imperial units, displaying the results, and then clearing the input for a new conversion. Each conversion is calculated using appropriate formulas and displayed with two-way conversion outputs to help users quickly see the relationship between different unit systems.